

plugins {
    id 'java'
    id "io.qameta.allure" version "2.9.6"
    id "io.freefair.lombok" version "6.0.0-m2"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def selenideVersion = '6.2.1',
    junitVersion = '5.8.2',
    slf4jVersion = '1.7.33',
    allureVersion = "2.17.3",
    restAssuredVersion = "5.0.1"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        autoconfigure.set(true)
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            'com.github.javafaker:javafaker:1.0.2',
            'com.mashape.unirest:unirest-java:1.4.9',
            'org.json:json:20220320',
            'ch.qos.logback:logback-classic:1.2.3',
            'com.fasterxml.jackson.core:jackson-annotations:2.10.3',
            'org.projectlombok:lombok:1.18.24',
            'io.rest-assured:rest-assured:5.0.1',
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            'org.aeonbits.owner:owner:1.0.12',
            'org.assertj:assertj-core:3.22.0',
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion"
    )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}


tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }
}

compileJava {
    options.encoding = "UTF-8"
}
compileTestJava {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task properties_test(type: Test) {
    useJUnitPlatform {
        includeTags "properties"
    }
}
task smoke_test(type: Test) {
    useJUnitPlatform {
        includeTags "smoke"
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
